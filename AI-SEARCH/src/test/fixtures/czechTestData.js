// Test data specifically for Czech language and diacritics handling

export const czechTestDocument = `
Smlouva o koupi nemovitosti

Prod√°vaj√≠c√≠: Ing. Jan Nov√°k, rodn√© ƒç√≠slo: 940919/1022, bytem Praha 2, Vinohrady, 
ul. M√≠ru 123/45, PSƒå 120 00.
ƒå√≠slo √∫ƒçtu: 123456789/0800, IBAN: CZ6508000000192000145399

Kupuj√≠c√≠: Marie Svobodov√° (rozen√° ƒåern√°), narozena 23.6.1985, Rƒå: 850623/3456, 
bytem Brno, ≈†t√Ω≈ôice, Kosmonaut≈Ø 78, PSƒå 615 00.
Bankovn√≠ spojen√≠: 987654321/2700

P≈ôedmƒõt koupƒõ:
- Pozemek parceln√≠ ƒç√≠slo: 234/5 v k.√∫. Vinohrady
- List vlastnictv√≠ ƒç. LV 1234/Vinohrady  
- V√Ωmƒõra: 856 m¬≤

Kupn√≠ cena a platebn√≠ podm√≠nky:
- Celkov√° kupn√≠ cena: 7 850 000 Kƒç (slovy: sedm milion≈Ø osm set pades√°t tis√≠c korun ƒçesk√Ωch)
- Z√°loha p≈ôi podpisu: 785 000 CZK
- RPSN: 5,9%
- √örokov√° sazba: 3.45 % p.a.
- Poplatek za zpracov√°n√≠ √∫vƒõru: 12 500 Kƒç

D≈Øle≈æit√° data:
- Datum podpisu smlouvy: 15.12.2024
- Datum splatnosti z√°lohky: 31/01/2025  
- Term√≠n p≈ôed√°n√≠ nemovitosti: 2025-02-15

Dal≈°√≠ √∫ƒçastn√≠ci:
- Realitn√≠ makl√©≈ô: Ing. Pavel Dvo≈ô√°k, tel.: +420 603 123 456
- Pr√°vn√≠k kupuj√≠c√≠ho: JUDr. Kate≈ôina Nov√°kov√°, mob.: 724 987 654
- Znalec: Ing. Tom√°≈° Proch√°zka, Ph.D., kontakt: tproch√°zka@znalci.cz
`

export const diacriticsTestCases = [
  // Czech characters with their ASCII equivalents
  { original: 'ƒõ≈°ƒç≈ô≈æ√Ω√°√≠√©√∫≈Øƒè≈•≈à', normalized: 'escrzyaieuudtn' },
  { original: 'ƒö≈†ƒå≈ò≈Ω√ù√Å√ç√â√ö≈Æƒé≈§≈á', normalized: 'escrzyaieuudtn' },
  { original: 'p≈ô√≠li≈° ≈ælu≈•ouƒçk√Ω k≈Ø≈à', normalized: 'prilis zlutoucky kun' },
  { original: 'P≈ò√çLI≈† ≈ΩLU≈§OUƒåK√ù K≈Æ≈á', normalized: 'prilis zlutoucky kun' },
  { original: 'ƒçe≈°tina', normalized: 'cestina' },
  { original: 'ƒåE≈†TINA', normalized: 'cestina' }
]

export const validationTestCases = {
  birthNumbers: [
    // Valid formats
    { value: '940919/1022', valid: true },
    { value: '850623/3456', valid: true },
    { value: '123456/7890', valid: true },
    { value: '000101/123', valid: true },
    // Invalid formats
    { value: '94091/1022', valid: false },
    { value: '940919-1022', valid: false },
    { value: '940919/10222', valid: false },
    { value: 'abcdef/1234', valid: false }
  ],
  
  amounts: [
    // Valid formats
    { value: '7 850 000 Kƒç', valid: true },
    { value: '785 000 CZK', valid: true },
    { value: '12 500 Kƒç', valid: true },
    { value: '1,234.56 EUR', valid: true },
    { value: '999.99', valid: true },
    // Invalid formats  
    { value: '7,850,000 Kƒç', valid: false },
    { value: 'abc Kƒç', valid: false },
    { value: '123,456.789 EUR', valid: false }
  ],
  
  rpsn: [
    // Valid formats
    { value: '5,9%', valid: true },
    { value: '3.45%', valid: true },
    { value: '12%', valid: true },
    { value: '0.5%', valid: true },
    // Invalid formats
    { value: '5,9', valid: false },
    { value: '123.4%', valid: false },
    { value: 'abc%', valid: false }
  ],
  
  bankAccounts: [
    // Valid formats
    { value: '123456789/0800', valid: true },
    { value: '987654321/2700', valid: true },
    { value: '19-2000145399/0800', valid: true },
    // Invalid formats
    { value: '123456789-0800', valid: false },
    { value: '123456789/08000', valid: false },
    { value: 'abcd/1234', valid: false }
  ],
  
  ibans: [
    // Valid formats  
    { value: 'CZ6508000000192000145399', valid: true },
    { value: 'CZ65 0800 0000 1920 0014 5399', valid: false }, // spaces not handled in basic validation
    { value: 'SK3112000000198742637541', valid: true },
    // Invalid formats
    { value: 'CZ650800000019200014539', valid: false },
    { value: '6508000000192000145399', valid: false },
    { value: 'CZ65abcd0000192000145399', valid: false }
  ]
}

export const fuzzySearchTestCases = [
  // Exact matches
  { 
    query: 'Jan Nov√°k', 
    document: czechTestDocument,
    expectedMatches: ['Jan Nov√°k'],
    matchType: 'exact'
  },
  
  // Case insensitive
  {
    query: 'jan nov√°k',
    document: czechTestDocument, 
    expectedMatches: ['Jan Nov√°k'],
    matchType: 'case_insensitive'
  },
  
  // Diacritics insensitive
  {
    query: 'jan novak',
    document: czechTestDocument,
    expectedMatches: ['Jan Nov√°k'], 
    matchType: 'diacritics_insensitive'
  },
  
  // Birth number patterns
  {
    query: '940919/1022',
    document: czechTestDocument,
    expectedMatches: ['940919/1022'],
    matchType: 'exact'
  },
  
  // Amount patterns
  {
    query: '7 850 000',
    document: czechTestDocument,
    expectedMatches: ['7 850 000 Kƒç'],
    matchType: 'partial'
  },
  
  // Percentage patterns
  {
    query: 'RPSN',
    document: czechTestDocument,
    expectedMatches: ['5,9%'],
    matchType: 'contextual'
  }
]

export const performanceTestData = {
  small: 'A'.repeat(1000), // 1KB
  medium: 'A'.repeat(100000), // 100KB  
  large: 'A'.repeat(1000000), // 1MB
  huge: 'A'.repeat(10000000) // 10MB
}

export const edgeCaseTestData = {
  empty: '',
  whitespace: '   \n\t  ',
  unicode: 'üîç Search test with emojis üíØ and unicode √±√°√©√≠√≥√∫',
  specialChars: '!@#$%^&*()_+-=[]{}|;:,.<>?',
  mixedContent: `
    HTML tags: <div>test</div> <script>alert('xss')</script>
    Markdown: **bold** *italic* [link](http://example.com)
    Czech: ≈ælu≈•ouƒçk√Ω k≈Ø≈à √∫pƒõl ƒè√°belsk√© √≥dy
    Numbers: 123 456.789 ‚Ç¨50,000
    Birth numbers: 940919/1022 850623/3456
  `,
  longLines: 'This is a very long line that exceeds typical text width limits and should test how the search algorithm handles extremely long single lines without breaking or causing performance issues. '.repeat(100),
  deepNesting: `Level 1
    Level 2
      Level 3
        Level 4
          Level 5
            Level 6
              Level 7
                Level 8
                  Level 9
                    Level 10 - nested content test`
}

export const highlightingTestCases = [
  {
    name: 'Single match',
    text: 'Jan Nov√°k je prod√°vaj√≠c√≠',
    query: 'Jan Nov√°k', 
    expectedRanges: [{ start: 0, end: 8 }]
  },
  {
    name: 'Multiple matches',
    text: 'Jan Nov√°k a Pavel Nov√°k jsou brat≈ôi',
    query: 'Nov√°k',
    expectedRanges: [{ start: 4, end: 9 }, { start: 18, end: 23 }]
  },
  {
    name: 'Overlapping ranges',
    text: 'Jan Nov√°k Nov√°k',
    query: 'Nov√°k', 
    expectedRanges: [{ start: 4, end: 9 }, { start: 10, end: 15 }]
  },
  {
    name: 'Case insensitive highlighting',
    text: 'JAN NOV√ÅK je prod√°vaj√≠c√≠',
    query: 'jan nov√°k',
    expectedRanges: [{ start: 0, end: 9 }]
  },
  {
    name: 'Diacritics insensitive highlighting', 
    text: '≈Ωlu≈•ouƒçk√Ω k≈Ø≈à √∫pƒõl',
    query: 'zlutoucky kun',
    expectedRanges: [{ start: 0, end: 9 }, { start: 10, end: 13 }]
  }
]