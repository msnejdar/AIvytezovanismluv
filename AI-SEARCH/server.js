import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// Testovac√≠ endpoint
app.get('/', (req, res) => {
  res.json({ 
    message: 'Porsche Search API Server je spu≈°tƒõn√Ω!', 
    timestamp: new Date().toISOString(),
    endpoints: ['/api/search']
  });
});

async function callClaudeAPI(query, document, retries = 3, delay = 1000) {
  for (let attempt = 0; attempt < retries; attempt++) {
    try {
      console.log('üîç Processing query:', query.substring(0, 100));

      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': process.env.ANTHROPIC_API_KEY,
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: 'claude-3-5-sonnet-20241022',
          max_tokens: 1024,
          messages: [{
            role: 'user',
            content: `Analyzuj n√°sleduj√≠c√≠ text a odpovƒõz na dotaz u≈æivatele.

U≈æivatel se pt√°: "${query}"

Text dokumentu:
${document}

DETEKCE TYPU DOTAZU:
Pokud dotaz ≈æ√°d√° odpovƒõƒè "Ano/Ne" (obsahuje "ano/ne", "ano nebo ne", "yes/no", apod.):
  ‚Üí Vra≈• JSON: {"answer": "Ano" nebo "Ne", "fullContext": "cel√Ω relevantn√≠ text z dokumentu"}
Jinak (norm√°ln√≠ dotaz na konkr√©tn√≠ √∫daj):
  ‚Üí Vra≈• prost√Ω text: "hodnota"

INSTRUKCE PRO ANO/NE DOTAZY (vra≈• JSON):
- "answer": POUZE "Ano" nebo "Ne"
- "fullContext": CEL√Å relevantn√≠ sekce z dokumentu (NIKDY ne jen "Ano/Ne"!)
- Zkop√≠ruj kompletn√≠ text (ƒçl√°nek/odstavec/tabulku), m≈Ø≈æe b√Ωt dlouh√Ω

≈†PATNƒö ‚ùå:
{"answer": "Ano", "fullContext": "Ano"}

SPR√ÅVNƒö ‚úÖ:
{"answer": "Ano", "fullContext": "Tabulka identifikaƒçn√≠ch doklad≈Ø Dlu≈æn√≠ka\n\nTyp dokladu: Obƒçansk√Ω pr≈Økaz\nƒå√≠slo: AB123456\nPlatnost do: 31.12.2030\n\nTyp dokladu: Pas\nƒå√≠slo: 98765432\nPlatnost do: 15.5.2028"}

INSTRUKCE PRO NORM√ÅLN√ç DOTAZY (vra≈• prost√Ω text):
- Rodn√© ƒç√≠slo, datum, ƒç√°stka, jm√©no ‚Üí vra≈• POUZE ten √∫daj
- Pokud nenajde≈° ‚Üí "Nenalezeno"

P≈ò√çKLADY:

Ano/Ne dotaz:
Dotaz: "je tam zastavn√≠ pr√°vo? ano/ne"
‚Üí {"answer": "Ano", "fullContext": "ƒål√°nek III - Zastavn√≠ pr√°vo\n\nDlu≈æn√≠k se zavazuje..."}

Norm√°ln√≠ dotaz:
Dotaz: "rodn√© ƒç√≠slo"
‚Üí 920515/1234

Tvoje odpovƒõƒè:`
          }]
        })
      });

      const data = await response.json();

      if (response.ok) {
        // Extract answer from Claude response
        const rawText = data.content?.[0]?.text?.trim() || 'Nenalezeno';

        console.log('üîç Claude raw response:', rawText.substring(0, 200));

        // Try to parse as JSON (for yes/no questions)
        if (rawText.startsWith('{')) {
          try {
            const parsed = JSON.parse(rawText);
            console.log('‚úÖ JSON parsed successfully');
            console.log('   answer:', parsed.answer);
            console.log('   fullContext length:', parsed.fullContext?.length || 0);
            console.log('   fullContext preview:', parsed.fullContext?.substring(0, 100) || 'EMPTY');

            if (parsed.answer && parsed.fullContext !== undefined) {
              // Yes/No question response
              return {
                success: true,
                answer: parsed.answer,
                fullContext: parsed.fullContext
              };
            }
          } catch (e) {
            // If JSON parsing fails, treat as normal answer
            console.log('‚ùå JSON parse failed, treating as normal answer:', e.message);
          }
        }

        // Normal question response (backward compatible)
        console.log('üìù Normal answer (not JSON)');
        return { success: true, answer: rawText };
      } else {
        // Pokud je API p≈ôet√≠≈æen√© a m√°me je≈°tƒõ pokusy, zkus√≠me znovu
        if (data.error?.type === 'overloaded_error' && attempt < retries - 1) {
          console.log(`Pokus ${attempt + 1}/${retries} - API p≈ôet√≠≈æen√©, ƒçek√°m ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
          delay *= 2; // Exponenci√°ln√≠ backoff
          continue;
        }
        
        console.error('Claude API error:', data);
        return { success: false, error: data.error, status: response.status };
      }
    } catch (error) {
      if (attempt === retries - 1) {
        console.error('Network error:', error);
        return { success: false, error: { type: 'network_error', message: error.message } };
      }
      
      console.log(`Pokus ${attempt + 1}/${retries} - S√≠≈•ov√° chyba, ƒçek√°m ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      delay *= 2;
    }
  }
}

app.post('/api/categorize', async (req, res) => {
  const { queries } = req.body;

  if (!queries || !Array.isArray(queries)) {
    return res.status(400).json({ error: 'Queries must be an array' });
  }

  console.log(`[API] Kategorizace ${queries.length} polo≈æek`);

  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 2048,
        messages: [{
          role: 'user',
          content: `Rozt≈ôiƒè n√°sleduj√≠c√≠ seznam polo≈æek do logick√Ωch kategori√≠.

Polo≈æky:
${queries.map((q, i) => `${i+1}. ${q}`).join('\n')}

Vra≈• POUZE JSON ve form√°tu:
[
  {"category": "Identifikaƒçn√≠ √∫daje", "items": ["Rodn√© ƒç√≠slo", "Datum narozen√≠", ...]},
  {"category": "Kontaktn√≠ √∫daje", "items": ["Email", "Telefon", ...]},
  {"category": "Finanƒçn√≠ √∫daje", "items": ["V√Ω≈°e √∫vƒõru", ...]},
  {"category": "Ostatn√≠", "items": [...]}
]

PRAVIDLA:
- Pou≈æij ƒçesk√© n√°zvy kategori√≠
- Ka≈æd√° polo≈æka mus√≠ b√Ωt pouze v jedn√© kategorii
- Polo≈æky, kter√© nelze za≈ôadit, dej do kategorie "Ostatn√≠"
- Vra≈• POUZE JSON, ≈æ√°dn√Ω dal≈°√≠ text`
        }]
      })
    });

    const data = await response.json();

    if (response.ok) {
      const text = data.content?.[0]?.text?.trim();
      const categories = JSON.parse(text);
      console.log(`[API] Kategorizov√°no do ${categories.length} kategori√≠`);
      res.json({ categories });
    } else {
      console.error('Claude API error:', data);
      res.status(500).json({ error: 'Chyba p≈ôi kategorizaci' });
    }
  } catch (error) {
    console.error('Categorization error:', error);
    res.status(500).json({ error: 'Chyba p≈ôi kategorizaci' });
  }
});

app.post('/api/batch-search', async (req, res) => {
  const { queries, document } = req.body;

  if (!queries || !Array.isArray(queries) || queries.length === 0) {
    return res.status(400).json({ error: 'Queries must be a non-empty array' });
  }

  if (!document) {
    return res.status(400).json({ error: 'Document is required' });
  }

  console.log(`[API] Batch search: ${queries.length} polo≈æek`);

  try {
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 1024,
        messages: [{
          role: 'user',
          content: `Analyzuj n√°sleduj√≠c√≠ dokument a najdi P≈òESNƒö tyto √∫daje.

D≈ÆLE≈ΩIT√â: Vra≈• POUZE JSON ve form√°tu n√≠≈æe, nic v√≠c.

Dokument:
${document}

Hledan√© √∫daje:
${queries.map((q, i) => `${i+1}. ${q}`).join('\n')}

Vra≈• JSON:
{
  "results": [
    {"query": "Rodn√© ƒç√≠slo", "value": "940819/1011"},
    {"query": "Datum narozen√≠", "value": "19.8.1994"},
    ...
  ]
}

PRAVIDLA:
- Pro ka≈ædou hledanou polo≈æku vra≈• objekt s "query" (p≈ôesn√Ω n√°zev) a "value" (nalezen√° hodnota)
- Pokud hodnotu nenajde≈°, vra≈• "value": "Nenalezeno"
- Vra≈• POUZE samotn√© hodnoty, ≈æ√°dn√© vysvƒõtlen√≠
- Zachovej P≈òESN√â n√°zvy dotaz≈Ø jak jsou uvedeny v√Ω≈°e`
        }]
      })
    });

    const data = await response.json();

    if (response.ok) {
      const text = data.content?.[0]?.text?.trim();
      let results;

      try {
        const parsed = JSON.parse(text);
        results = parsed.results;
      } catch (parseError) {
        console.error('Failed to parse batch response:', text);
        // Fallback: return "Nenalezeno" for all
        results = queries.map(q => ({ query: q, value: 'Nenalezeno' }));
      }

      // Ensure all queries have results
      const resultMap = new Map(results.map(r => [r.query, r.value]));
      const completeResults = queries.map(q => ({
        query: q,
        value: resultMap.get(q) || 'Nenalezeno'
      }));

      console.log(`[API] Batch results: ${completeResults.length} polo≈æek`);
      res.json({ results: completeResults });
    } else {
      console.error('Claude API error:', data);
      res.status(500).json({ error: 'Chyba p≈ôi vyhled√°v√°n√≠' });
    }
  } catch (error) {
    console.error('Batch search error:', error);
    res.status(500).json({ error: 'Chyba p≈ôi vyhled√°v√°n√≠' });
  }
});

app.post('/api/search', async (req, res) => {
  const { query, document } = req.body;

  if (!query || !document) {
    return res.status(400).json({ error: 'Query a document jsou povinn√©' });
  }

  console.log(`[API] Vyhled√°v√°n√≠: "${query.substring(0, 50)}..."`);

  const result = await callClaudeAPI(query, document);

  if (result.success) {
    console.log(`[API] Odpovƒõƒè: "${result.answer.substring(0, 100)}..."`);

    // Include fullContext if present (for yes/no questions)
    const response = {
      answer: result.answer,
      confidence: 0.95
    };

    if (result.fullContext !== undefined) {
      console.log(`[API] üéØ fullContext detected! Length: ${result.fullContext.length}`);
      console.log(`[API] üéØ fullContext preview: "${result.fullContext.substring(0, 150)}..."`);
      response.fullContext = result.fullContext;
    } else {
      console.log(`[API] ‚ö†Ô∏è No fullContext in response`);
    }

    res.json(response);
  } else {
    const status = result.status || 500;
    console.error(`[API] Chyba:`, result.error);
    res.status(status).json({
      error: result.error?.message || 'Chyba p≈ôi vyhled√°v√°n√≠',
      answer: null
    });
  }
});

app.listen(PORT, () => {
  console.log(`Server bƒõ≈æ√≠ na portu ${PORT}`);
});